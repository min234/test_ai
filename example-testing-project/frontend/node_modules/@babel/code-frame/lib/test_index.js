```python
import pytest
from unittest.mock import MagicMock

def test_is_color_supported():
    import os
    # Mocking process environment
    original_env = os.environ
    os.environ = {}
    picocolors_mock = MagicMock()
    picocolors_mock.isColorSupported = True
    assert isColorSupported(picocolors_mock) == True

    os.environ['FORCE_COLOR'] = "0"
    assert isColorSupported(picocolors_mock) == False

    os.environ['FORCE_COLOR'] = "false"
    assert isColorSupported(picocolors_mock) == False

    os.environ = original_env

def test_compose():
    def f(x):
        return x + 1
    def g(x):
        return x * 2
    
    composed = compose(f, g)
    assert composed(3) == 7  # f(g(3)) = f(6) = 7

def test_build_defs():
    picocolors_mock = MagicMock()
    picocolors_mock.cyan = "cyan"
    picocolors_mock.yellow = "yellow"
    picocolors_mock.magenta = "magenta"
    picocolors_mock.green = "green"
    picocolors_mock.gray = "gray"
    picocolors_mock.white = "white"
    picocolors_mock.bgRed = "bgRed"
    picocolors_mock.bold = "bold"
    picocolors_mock.red = "red"
    picocolors_mock.reset = "reset"

    defs = buildDefs(picocolors_mock)
    
    assert defs['keyword'] == "cyan"
    assert defs['capitalized'] == "yellow"
    assert defs['punctuator'] == "yellow"
    assert defs['number'] == "magenta"
    assert defs['string'] == "green"
    assert defs['comment'] == "gray"
    assert defs['invalid'] == "bold(bgRed(white()))"
    assert defs['gutter'] == "gray"
    assert defs['marker'] == "bold(red())"
    assert defs['message'] == "bold(red())"
    assert defs['reset'] == "reset"
```